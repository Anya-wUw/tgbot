import logging

from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, executor, types
from aiogram.bot.api import TelegramAPIServer
from aiogram.types import ContentType

import buttoms as nav

#import mysql.connector


API_TOKEN = '2128273636:AAGQWY2z9O1pe2sBFCMDVf_qHLP_3UHKPeQ'
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# user_data = {}

# class User:
#     def __init__(self, first_name):
#         self.first_name = first_name
#         self.last_name = ''


# db = mysql.connector.connect(
#     host = 'localhost',
#     user = 'root',
#     passwd = '2002',
#     port = '3306',
#     database = 'tgbot'
# )

# cursor = db.cursor()

#cursor.execute("CREATE DATABASE tgbot")
#cursor.execute("CREATE TABLE users (first_name VARCHAR(255), last_name VARCHAR(255))")
#cursor.execute("ALTER TABLE users ADD COLUMN (id INT AUTO_INCREMENT PRIMARY KEY, user_id INT UNIQUE)")

# sql = "INSERT INTO users (first_name, last_name, user_id) VALUES (%s, %s, %s)"
# val = ("Anna", "Borisyuk", 1)
# cursor.execute(sql, val)
# db.commit()

# print(cursor.rowcount, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω.")



@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await bot.send_sticker(message.from_user.id, 'https://cdn.tlgrm.app/stickers/110/fa7/110fa78e-0ff1-3ef2-aae6-322248b5cfe5/192/7.webp')
    await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —É—Å–ª—É–≥—É', reply_markup=nav.mainMenu)

@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):
    await bot.send_sticker(message.from_user.id, 'https://cdn.tlgrm.app/stickers/110/fa7/110fa78e-0ff1-3ef2-aae6-322248b5cfe5/192/10.webp')
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É\n")

@dp.message_handler(commands=['data'])
async def cmd_data(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))
    keyboard.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)



# @dp.message_handler(commands=['registration'])
# async def send_welcome(message: types.Message):
#     msg = bot.sent_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è')
#     bot.register_next_step_handler(msg, process_firstname_step)

# async def process_firstname_step(message: types.Message):
#     try:
#         user_id = message.from_user.id
#         user_data[user_id] = User(message.text)

#         msg = bot.sent_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é')
#         bot.register_next_step_hander(msg, process_lastname_step)
#     except Exception as e:
#         bot.sent_message(message.chat.id, '–û—à–∏–±–∫–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑')

# async def process_lastname_step(message: types.Message):
#     try: 
#         user_id = message.from_user.id
#         user = user_data[user_id]
#         user.last_name = message.text

#         sql = "INSERT INTO users (first_name, last_name, user_id) VALUES (%s, %s, %s)"
#         val = (user.first_name, user.last_name, user_id)
#         cursor.execute(sql, val)
#         db.commit()

#         bot.sent_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
#     except Exception as e:
#         bot.sent_message(message.chat.id, '–û—à–∏–±–∫–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏–ª–∏ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚è™':
        await bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —É—Å–ª—É–≥—É', reply_markup=nav.mainMenu)
    elif message.text == '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–ºüë©üèΩ‚Äç‚öïÔ∏è':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–∞—á–∞:', reply_markup=nav.recMenu)
    elif message.text == '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µüìù':
        await bot.send_message(message.from_user.id, '–£ –í–∞—Å –µ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?', reply_markup=nav.analMenu)
    elif message.text == 'COVID19ü¶†':
        await bot.send_message(message.from_user.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –≥–æ—Ä–æ–¥–µ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏, –±–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è!\n–ö–∞–∫—É—é —É—Å–ª—É–≥—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º, –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?', reply_markup=nav.covMenu)
    elif message.text == '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—åüöë':
        await bot.send_sticker(message.from_user.id, 'https://cdn.tlgrm.app/stickers/110/fa7/110fa78e-0ff1-3ef2-aae6-322248b5cfe5/192/10.webp')
        await bot.send_message(message.from_user.id, '–ù–µ –ø–∞–Ω–∏–∫—É–π—Ç–µ!\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É: 103\n–ò–ª–∏ –æ–ø–∏—Å–∞—Ç—å –Ω–∞–º —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –∞–¥—Ä–µ—Å(–≤—ã–±–µ—Ä–µ—Ç–µ –∫–Ω–æ–ø–∫—É "–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è"), –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à—É—é –±–æ–ª—å–Ω–∏—Ü—É!', reply_markup=nav.emergMenu) 
    
    #–ö–æ–¥ –ö–∞—Ä–∏–Ω—ã
    elif message.text == '–¢–µ—Ä–∞–ø–µ–≤—Ç' :
        await bot.send_message(message.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É:',
                               reply_markup=nav.timeTerMenu)
    elif message.text == '–•–∏—Ä—É—Ä–≥' :
        await bot.send_message(message.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ö–∏—Ä—É—Ä–∫–∞. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É:',
                               reply_markup=nav.timeSurgMenu)
    elif message.text == '–ì–∏–Ω–µ–∫–æ–ª–æ–≥':
        await bot.send_message(message.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–∏–Ω–µ–∫–æ–ª–æ–≥–∞. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É:',
                               reply_markup=nav.timeGynMenu)
    elif message.text == '–û—Ç–æ—Ä–∏–Ω–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥ (–õ–û–†)':
        await bot.send_message(message.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–æ—Ä–∏–Ω–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥–∞. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É:',
                               reply_markup=nav.timeLorMenu)
    
    else:
        await message.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)